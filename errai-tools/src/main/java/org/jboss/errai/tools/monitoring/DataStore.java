/*
 * Copyright 2009 JBoss, a divison Red Hat, Inc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jboss.errai.tools.monitoring;

import org.jboss.errai.bus.client.api.Message;

import java.io.File;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class DataStore {
    Connection c;

    public DataStore() {
        try {
            Class.forName("org.hsqldb.jdbcDriver").newInstance();

            new File("monitordb").delete();

            c = DriverManager.getConnection("jdbc:hsqldb:file:monitordb", "sa", "");
            createDB();
        }
        catch (Throwable t) {
            t.printStackTrace();
            throw new RuntimeException("error: " + t);
        }
    }

    private void createDB() throws SQLException {
        c.createStatement().execute("DROP TABLE MONITORDB IF EXISTS");

        c.createStatement().execute("CREATE CACHED TABLE MONITORDB ( " +
                "EVENT_ID INT GENERATED BY DEFAULT AS IDENTITY (START WITH 0) PRIMARY KEY, " +
                "BUS_ID VARCHAR(150) NOT NULL, " +
                "TM BIGINT NOT NULL, " +
                "SERVICE_NAME VARCHAR(150) NOT NULL, " +
                "MESSAGE_OBJ OBJECT NOT NULL)");
    }

    public class Record {
        private int eventId;
        private long time;
        private String busId;
        private String service;
        private Message message;

        public Record(int eventId, long time, String busId, String service, Message message) {
            this.eventId = eventId;
            this.time = time;
            this.busId = busId;
            this.service = service;
            this.message = message;
        }

        public int getEventId() {
            return eventId;
        }

        public String getBusId() {
            return busId;
        }

        public String getService() {
            return service;
        }

        public Message getMessage() {
            return message;
        }
    }

    public void storeRecord(long time, String busId, String service, Message message) {
        try {
            PreparedStatement stmt = c.prepareStatement("INSERT INTO MONITORDB (TM, BUS_ID, SERVICE_NAME, MESSAGE_OBJ) VALUES (?, ?, ?, ?)");
            stmt.setLong(1, time);
            stmt.setString(2, busId);
            stmt.setString(3, service);
            stmt.setObject(4, message);
            stmt.execute();
        }
        catch (Throwable e) {
            throw new RuntimeException("error", e);
        }
    }

    public List<Record> getAllMessages(String busId, String service) {
        try {
            PreparedStatement stmt = c.prepareStatement("SELECT * FROM MONITORDB WHERE BUS_ID=? AND SERVICE_NAME=?");
            stmt.setString(1, busId);
            stmt.setString(2, service);
            if (stmt.execute()) {
                ResultSet results = stmt.getResultSet();

                ArrayList<Record> records = new ArrayList<Record>(100);
                Record r;
                while (results.next()) {
                    records.add(new Record(results.getInt(1), results.getLong(3), results.getString(2), results.getString(4), (Message) results.getObject(5)));
                }
                return records;

            }
            return null;
        }
        catch (Throwable e) {
            throw new RuntimeException("error", e);
        }

    }

   
}



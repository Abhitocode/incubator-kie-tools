@code{
    /*
     * import all the java.util classes.
     */
    import java.util.*;

    /*
     * Map these reflection utility methods in.
     */
    getGetter = org.mvel2.util.ReflectionUtil.getGetter;
    getSetter = org.mvel2.util.ReflectionUtil.getSetter;
    getIsGetter = org.mvel2.util.ReflectionUtil.getIsGetter;

    /*
     * Create a simple convenience function for extracting the JClassType instance for a particular
     * class from the type oracle.
     */
    def getType(cls) {
         return typeOracle.getType(cls.getName());
    }

    /*
     * Define some default class implementations to use for specific collection types.
     */
    collectionDefaults =
        [
            getType(java.util.Map)          : "java.util.HashMap",
            getType(java.util.Set)          : "java.util.HashSet",
            getType(java.util.Collection)   : "java.util.ArrayList"
        ];

    /*
     * Create a function which finds an appropriate class implementation for a specified interface and
     * returns it.
     */
    def getDefaultCollection(colType) {
        for (t : collectionDefaults.keySet()) {
            if (t.isAssignableFrom(colType)) return collectionDefaults[t];
        }
        return null;
    };
}

if (widget.@{targetWidgetField.name} == null) {
    widget.@{targetWidgetField.name} = new @{getDefaultCollection(widgetCollectionType)}<@{widgetType.qualifiedSourceName}>();
}

if (widget.@{targetEntityField.name} == null) {
    throw new RuntimeException("Target field '@{targetEntityField.name}' is null");
}

if (widget.@{targetEntityField.name}.@{getGetter(targetEntityMember.name)}() == null) {
    throw new RuntimeException("Target field '@{targetEntityField.name}.@{targetEntityMember.name}' is null");
}

final org.jboss.errai.widgets.client.mapping.FieldMapper<@{widgetType.qualifiedSourceName}, @{widgetType.qualifiedSourceName}, @{entityCollectionType.qualifiedSourceName}> @{varName} =
        new org.jboss.errai.widgets.client.mapping.FieldMapper<@{widgetType.qualifiedSourceName}, @{widgetType.qualifiedSourceName}, @{entityCollectionType.qualifiedSourceName}>() {
             public @{widgetType.qualifiedSourceName} getFieldValue(@{widgetType.qualifiedSourceName} w, @{entityCollectionType.qualifiedSourceName} value) {
                for (@{widgetType.qualifiedSourceName} wld : widget.@{targetWidgetField.name}) {
                    @eval{org.jboss.errai.widgets.rebind.widgetmappers.ColMappers.getMapper(widgetType.qualifiedSourceName).generateGetField(typeOracle,targetEntityField.type.isClassOrInterface())}
                }

                return w;
             }

             public void setFieldValue(@{widgetType.qualifiedSourceName} w, @{entityCollectionType.qualifiedSourceName} value) {
                for (@{widgetType.qualifiedSourceName} wld : widget.@{targetWidgetField.name}) {
                     @eval{org.jboss.errai.widgets.rebind.widgetmappers.ColMappers.getMapper(widgetType.qualifiedSourceName).generateSetField(typeOracle,targetEntityField.type.isClassOrInterface())}
                }
             }

        };

for (final @{widgetType.qualifiedSourceName} wld : widget.@{targetWidgetField.name}) {
   @eval{org.jboss.errai.widgets.rebind.widgetmappers.ColMappers.getMapper(widgetType.qualifiedSourceName).generateValueChange(typeOracle,targetEntityField.type.isClassOrInterface())}
}
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="sid-5931402">
    
    <title>Dependency Injection</title>
    <para>
      The core Errai IOC module implements a subset of the
      <emphasis role="italics">
        <ulink url="http://download.oracle.com/otndocs/jcp/dependency_injection-1.0-final-oth-JSpec/">JSR-330 Dependency Injection</ulink>
      </emphasis>
      specification for in-client component wiring.
    </para>
    <para>Dependency injection (DI) allows for cleaner and more modular code, by permitting the implementation of decoupled and type-safe components. By using DI, components do not need to be aware of the implementation of provided services. Instead, they merely declare a contract with the container, which in turn provides instances of the services that component depends on.</para>
    <para>A simple example:</para>
    <informalexample>
      <programlisting language="java">public class MyLittleClass {
  private final TimeService timeService;

  @Inject
  public MyLittleClass(TimeService timeService) {
    this.timeService = timeService;
  }

  public void printTime() {
    System.out.println(this.timeService.getTime());
  }
}</programlisting>
    </informalexample>
    <para>
      In this example, we create a simple class which declares a dependency using
      <code>
        <ulink url="http://download.oracle.com/javaee/6/api/javax/inject/Inject.html">@Inject</ulink>
      </code>
      for the interface
      <code>TimeService</code>
      . In this particular case, we use constructor injection to establish the contract between the container and the component. We can similarly use field injection to the same effect:
    </para>
    <informalexample>
      <programlisting language="java">public class MyLittleClass {
  @Inject
  private TimeService timeService;

  public void printTime() {
    System.out.println(this.timeService.getTime());
  }
}</programlisting>
    </informalexample>
    <tip>
      <title>Best Practices</title>
      <para>Although field injection results in less code, a major disadvantage is that you cannot create immutable classes using the pattern, since the container must first call the default, no argument constructor, and then iterate through its injection tasks, which leaves the potential – albeit remote – that the object could be left in an partially or improperly initialized state. The advantage of constructor injection is that fields can be immutable (final), and invariance rules applied at construction time, leading to earlier failures, and the guarantee of consistent state.</para>
    </tip>
    <section id="sid-5931407">
      
      <title>Container Wiring</title>
      <para>
        In contrast to
        <ulink url="http://code.google.com/p/google-gin/">Gin</ulink>
        , the Errai IOC container does not provide a programmatic way of creating and configuring injectors. Instead, container-level binding rules are defined by implementing a
        <code>
          <ulink url="http://download.oracle.com/javaee/6/api/javax/inject/Provider.html">Provider</ulink>
        </code>
        , which is scanned for an auto-discovered by the container.
      </para>
      <para>
        A
        <code>Provider</code>
        is essentially a factory which produces dependent types in the container, which defers instantiation responsibility for the provided type to the provider implementation. Top-level providers use the standard
        <code>javax.inject.Provider&lt;T&gt;</code>
        interface.
      </para>
      <para>
        Types made available as
        <emphasis role="italics">top-level</emphasis>
        providers will be available for injection in any managed component within the container.
      </para>
      <para>Out of the box, Errai IOC implements three default top-level providers:</para>
      <itemizedlist>
        <listitem>
          <para>
            <code>org.jboss.errai.ioc.client.api.builtin.MessageBusProvider       :</code>
            Makes an instance of
            <code>MessageBus</code>
            available for injection.
          </para>
        </listitem>
        <listitem>
          <para>
            <code>org.jboss.errai.ioc.client.api.builtin.RequestDispatchProvider  :</code>
            Makes an instance of the
            <code>RequestDispatcher</code>
            available for injection.
          </para>
        </listitem>
        <listitem>
          <para>
            <code>org.jboss.errai.ioc.client.api.builtin.ConsumerProvider         :</code>
            Makes event
            <code>Consumer&lt;?&gt;</code>
            objects available for injection.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        Implementing a
        <code>Provider</code>
        is relatively straight-forward. Consider the following two classes:
      </para>
      <para>
        <emphasis role="strong">TimeService.java</emphasis>
      </para>
      <informalexample>
        <programlisting language="java">public interface TimeService {
  public String getTime();
}</programlisting>
      </informalexample>
      <para>
        <emphasis role="strong">TimeServiceProvider.java</emphasis>
      </para>
      <informalexample>
        <programlisting language="java">@IOCProvider
@Singleton
public class TimeServiceProvider implements Provider&lt;TimeService&gt; {
  @Override
  public TimeService get() {
    return new TimeService() {
      public String getTime() {
        return "It's midnight somewhere!";
      }
    };
  }
}</programlisting>
      </informalexample>
      <para>If you are familiar with Guice, this is semantically identical to configuring an injector like so:</para>
      <informalexample>
        <programlisting language="java">Guice.createInjector(new AbstractModule() {
  public void configure() {
    bind(TimeService.class).toProvider(TimeServiceProvider.class);
  }
 }).getInstance(MyApp.class);</programlisting>
      </informalexample>
      <para>
        As shown in the above example code, the annotation
        <code>@IOCProvider</code>
        is used to denote top-level providers.
      </para>
      <para>The classpath will be searched for all annotated providers at compile time.</para>
      <important>
        <para>Top-level providers are treated as regular beans. And as such may inject dependencies – particularly from other top-level providers – as necessary.</para>
      </important>
    </section>
    <section id="sid-5931332">
      
      <title>Wiring server side components</title>
      <para>
        By default, ErraiBus uses Google Guice to wire components. However, we plan on standardizing on
        <emphasis role="italics">JSR-330 Dependency Injection</emphasis>
        specification in the near future. When deploying services on the server-side, it is currently possible to obtain references to the
        <code>MessageBus</code>
        ,
        <code>RequestDispatcher</code>
        , the
        <code>ErraiServiceConfigurator</code>
        , and
        <code>ErraiService</code>
        by declaring them as injection dependencies in Service classes, extension components, and session providers.
      </para>
    </section>
  </chapter>

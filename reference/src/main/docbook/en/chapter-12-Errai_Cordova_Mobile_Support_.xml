<?xml version="1.0" encoding="UTF-8"?>
<chapter id="sid-65274252">
   <title>Errai Cordova (Mobile Support)</title>
   <para>Starting with version 2.4.0, Errai now supports mobile development. One of the modules that makes this feasible is the Cordova module. It offers a way to integrate with native hardware in an Errai way.</para>
   <section id="sid-65274252_ErraiCordova%28MobileSupport%29-Getstarted">
      <title>Get started</title>
      <para>Add the following to your application's .gwt.xml module file:</para>
      <section id="sid-65274252_ErraiCordova%28MobileSupport%29-App.gwt.xml">
         <title>App.gwt.xml</title>
         <informalexample>
            <programlisting language="xml">
&lt;inherits name="org.jboss.errai.ui.Cordova"/&gt;
</programlisting>
         </informalexample>
      </section>
   </section>
   <section id="sid-65274252_ErraiCordova%28MobileSupport%29-Integratewithnativehardware">
      <title>Integrate with native hardware</title>
      <para>When the Cordova module is included you can integrate with native hardware by injecting the native components into your code:</para>
      <informalexample>
         <programlisting language="java">
@Templated("#main")
public class KitchenSinkClient extends Composite {
  @Inject
  Camera camera;

  @Inject
  @DataField
  Button takePicture;

  @EventHandler("takePicture")
  public void onTakePicktureClicked(ClickEvent event) {
    PictureOptions options = new PictureOptions(25);
    options.setDestinationType(PictureOptions.DESTINATION_TYPE_DATA_URL);
    options.setSourceType(PictureOptions.PICTURE_SOURCE_TYPE_CAMERA);

    camera.getPicture(options, new PictureCallback() {

      @Override
      public void onSuccess(String data) {
        image.setUrl(UriUtils.fromSafeConstant("data:image/jpeg;base64," + data));
      }

      @Override
      public void onFailure(String error) {
        setGeneralErrorMessage("Could not take picture: " + error);
      }
    });
  }
</programlisting>
      </informalexample>
      <para>
        The components that are supported come from the
        <ulink url="https://code.google.com/p/gwt-phonegap/">gwt-phonegap</ulink>
        project have a look there form more documentation.
      </para>
      <para>Here are the native hardware components you can inject:</para>
      <itemizedlist>
         <listitem>
            <para>Camera</para>
         </listitem>
         <listitem>
            <para>Accelerometer</para>
         </listitem>
         <listitem>
            <para>Contacts</para>
         </listitem>
         <listitem>
            <para>Capture (Provides access to the audio, image, and video capture capabilities of the device).</para>
         </listitem>
         <listitem>
            <para>Compass</para>
         </listitem>
         <listitem>
            <para>
            Notification (
            <ulink url="http://docs.phonegap.com/en/edge/cordova_notification_notification.md.html#Notification">see documentation on phonegap site</ulink>
            )
          </para>
         </listitem>
         <listitem>
            <para>File create a native file</para>
         </listitem>
         <listitem>
            <para>Device Get general information about the device.</para>
         </listitem>
      </itemizedlist>
      <para>
        So to integrate with these things all we have to do is
        <code>@Inject</code>
        these classes. There are also a couple of CDI events one can observe to be informed about hardware state:
      </para>
      <itemizedlist>
         <listitem>
            <para>BackButtonEvent</para>
         </listitem>
         <listitem>
            <para>BatteryCriticalEvent</para>
         </listitem>
         <listitem>
            <para>BatteryEvent</para>
         </listitem>
         <listitem>
            <para>BatteryLowEvent</para>
         </listitem>
         <listitem>
            <para>BatteryStatusEvent</para>
         </listitem>
         <listitem>
            <para>EndCallButtonEvent</para>
         </listitem>
         <listitem>
            <para>MenuButtonEvent</para>
         </listitem>
         <listitem>
            <para>OffLineEvent</para>
         </listitem>
         <listitem>
            <para>OnlineEvent</para>
         </listitem>
         <listitem>
            <para>PauseEvent</para>
         </listitem>
         <listitem>
            <para>ResumeEvent</para>
         </listitem>
         <listitem>
            <para>SearchButtonEvent</para>
         </listitem>
         <listitem>
            <para>StartCallButtonEvent</para>
         </listitem>
         <listitem>
            <para>VolumeDownButtonEvent</para>
         </listitem>
         <listitem>
            <para>VolumeUpButtonEvent</para>
         </listitem>
      </itemizedlist>
      <para>Example of how to use these events:</para>
      <informalexample>
         <programlisting language="java">
  private void batteryIsLow(@Observes BatteryLowEvent event) {
  	//mission accomplished. we can stop the infinite loop now.
  }
</programlisting>
      </informalexample>
   </section>
   <section id="sid-65274252_ErraiCordova%28MobileSupport%29-Mavenbuild">
      <title>Maven build</title>
      <para>
        All that is left to do is build this and put it on a actual device. In order to make this as easy as possible we have a maven plugin that will create a native binary that you can install on a device. It will put the html and javascript of you application in a
        <ulink url="http://cordova.apache.org/">cordova</ulink>
        application, because by doing so the client is no longer servered by the server the client will need to know how it can reach the server to do that place the following in your gwt.xml:
      </para>
      <informalexample>
         <programlisting language="xml">
&lt;replace-with class="com.company.application.Config"&gt;
   &lt;when-type-is class="org.jboss.errai.bus.client.framework.Configuration" /&gt;
&lt;/replace-with&gt;
</programlisting>
      </informalexample>
      <para>This class must implement org.jboss.errai.bus.client.framework.Configuration and return the url where the server is configured.</para>
      <informalexample>
         <programlisting language="java">
import org.jboss.errai.bus.client.framework.Configuration;

public class Config implements Configuration {
    @Override
    public String getRemoteLocation() {
        // you probably want to do something environment specify here instead of something like this:
        return "https://grocery-edewit.rhcloud.com/errai-jpa-demo-grocery-list";
    }
}
</programlisting>
      </informalexample>
      <para>Now all that is left is to add the plugin to the pom.xml like so:</para>
      <informalexample>
         <programlisting language="xml">
&lt;build&gt;
 ...
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.jboss.errai&lt;/groupId&gt;
        &lt;artifactId&gt;cordova-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;${errai.version}&lt;/version&gt;
      &lt;/plugin&gt;
</programlisting>
      </informalexample>
      <para>Now you can execute a native build with the following maven command:</para>
      <informalexample>
         <programlisting language="ini">
#will build all supported platforms for now only ios and android
mvn cordova:build-project

#only build android
mvn cordova:build-project -Dplatform=android

#start the ios emulator with the deployed application
mvn cordova:emulator -Dplatform=ios
</programlisting>
      </informalexample>
      <important>
         <para>For these to work you'll need to have the SDK's installed and on your path! In case of android you will additionally have to have ANDROID_HOME environment variable set.</para>
      </important>
   </section>
   <section id="sid-65274252_ErraiCordova%28MobileSupport%29-AeroGearWrappers">
      <title>AeroGear Wrappers</title>
      <para>
        These wrappers allow your Errai client to talk to an AeroGear server. Also have a look at the
        <ulink url="http://aerogear.org/docs">documentation</ulink>
        of the AeroGear project.
      </para>
      <section id="sid-65274252_ErraiCordova%28MobileSupport%29-Pipes">
         <title>Pipes</title>
         <para>Pipes are for getting data from the server. Right now the only implementation is REST it will use Id to construct urls.</para>
         <informalexample>
            <programlisting language="java">
  Pipe&lt;Task&gt; pipe = new PipeFactory().createPipe(Task.class, "tasks");

  pipe.save(new Task(123, "new", "2012-01-01"), new AsyncCallback&lt;Task&gt;() {
    @Override
    public void onSuccess(Task result) {
      Window.alert("jipee saved a taks");
    }
    @Override
    public void onFailure(Throwable caught) {
    }
  });
</programlisting>
         </informalexample>
         <para>This will preform a PUT /tasks URL</para>
      </section>
      <section id="sid-65274252_ErraiCordova%28MobileSupport%29-Stores">
         <title>Stores</title>
         <para>Another concept that comes with AeroGear is Stores. Currently there are 2 Store types supported: Memory and SessionLocal. Memory is just a big javascript array to hold your data. Here is how you create and configure a Store:</para>
         <informalexample>
            <programlisting language="java">
    Store&lt;User&gt; store = new DataManager().store(User.class);

    store.save(new User(2, "test2"));
    Collection&lt;User&gt; collection = store.readAll();

    User user = store.read(2);
</programlisting>
         </informalexample>
      </section>
      <section id="sid-65274252_ErraiCordova%28MobileSupport%29-Authentication">
         <title>Authentication</title>
         <para>Pipes can be authenticated by just adding the authenticator into the Pipe and you are good to go.</para>
         <informalexample>
            <programlisting language="java">
    Authenticator authenticator = new AuthenticationFactory().createAuthenticator("name");
    Pipe&lt;Task&gt; pipe = new PipeFactory().createPipe(Task.class, "tasks", authenticator);

    authenticator.login(username.getText(), password.getText(), new AsyncCallback&lt;String&gt;() {
      @Override
      public void onSuccess(String result) {
        Window.alert("successful login");
      }

      @Override
      public void onFailure(Throwable caught) {
        message.setText("Login failed, please try again");
      }
    });
</programlisting>
         </informalexample>
         <para>
          There is also a method called
          <code>enroll()</code>
          for adding new users.
        </para>
      </section>
   </section>
</chapter>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="sid-5833085_ReferenceGuide-RepeatingTasks">
    
    <title>Repeating Tasks</title>
    <para>
      A repeating task is sent using one of the MessageBuilder's
      <code>repeatXXX()</code>
      methods. The task will repeat indefinitely until cancelled (see next section).
    </para>
    <informalexample>
      <programlisting>MessageBuilder.createMessage()
    .toSubject("FunSubject")
    .signalling()
    .withProvided("time", new ResourceProvider&lt;String&gt;() {
       SimpleDateFormat fmt = new SimpleDateFormat("hh:mm:ss");
     
       public String get() {
         return fmt.format(new Date(System.currentTimeMillis());
       }
     }
     .noErrorHandling()
     .sendRepeatingWith(requestDispatcher, TimeUnit.SECONDS, 1); //sends a message every 1 second</programlisting>
    </informalexample>
    <para>
      The above example sends a message very 1 second with a message part called
      <code>"time"</code>
      , containing a formatted time string. Note the use of the
      <code>withProvided()</code>
      method; a provided message part is calculated at the time of transmission as opposed to when the message is constructed.
    </para>
    <para>
      Cancelling an Asynchronous TaskA delayed or repeating task can be cancelled by calling the
      <code>cancel()</code>
      method of the
      <code>AsyncTask</code>
      instance which is returned when creating a task. Reference to the AsyncTask object can be retained and cancelled by any other thread.
    </para>
    <informalexample>
      <programlisting>AsyncTask task = MessageBuilder.createConversation(message)
  .toSubject("TimeChannel").signalling()
  .withProvided(TimeServerParts.TimeString, new ResourceProvider&lt;String&gt;() {
     public String get() {
       return String.valueOf(System.currentTimeMillis());
     }
   }).defaultErrorHandling().replyRepeating(TimeUnit.MILLISECONDS, 100);

    ...

  // cancel the task and interrupt it's thread if necessary.
  task.cancel(true);</programlisting>
    </informalexample>
  </chapter>

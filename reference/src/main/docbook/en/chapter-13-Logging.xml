<?xml version="1.0" encoding="UTF-8"?>
<chapter id="sid-74908675">
   <title>Logging</title>
   <para>
      Errai now supports using the
      <ulink url="http://www.slf4j.org/">slf4j</ulink>
      logging api on the server and client. This gives you the flexibility of choosing your own logging back-end for your server-side code, while still allowing a uniform logging interface that can be used in shared packages.
    </para>
   <section id="sid-74908675_Logging-Whatisslf4j%3F">
      <title>What is slf4j?</title>
      <para>sl4j is logging abstraction. Using the slf4j api, you can add log statements to your code using a fixed api while maintaining the ability to switch the logging implementation at run-time. For example, the slf4j api can be used with java.util.logging (JUL) as the back-end.</para>
   </section>
   <section id="sid-74908675_Logging-ClientSideSetup">
      <title>Client-Side Setup</title>
      <para>
        The client-side slf4j code uses the ï»¿
        <ulink url="http://www.gwtproject.org/doc/latest/DevGuideLogging.html">GWT Logging</ulink>
        as the back-end. Using slf4j in client-side code has two steps:
      </para>
      <orderedlist inheritnum="ignore" continuation="restarts">
         <listitem>
            <para>Add the errai-common artifact as a maven dependency to your project</para>
         </listitem>
         <listitem>
            <para>
            Inherit the gwt module
            <code>org.jboss.errai.common.Logging</code>
            </para>
         </listitem>
      </orderedlist>
      <para>The GWT logging back-end works analogously to JUL. See the above GWT Logging link for instructions on how to adjust settings such as the log level.</para>
   </section>
   <section id="sid-74908675_Logging-ServerSideSetup">
      <title>Server-Side Setup</title>
      <para>
        On the server you are free to use any logging back-end that has slf4j bindings (or to make your own). Just make sure to add dependencies for the slf4j-api artifact and the slf4j binding you choose.
        <emphasis role="strong">Note:</emphasis>
        Some application servers provide their own slf4j bindings (such as JBoss AS), in which case you should add your binding dependency as provided scope.
      </para>
      <para>
        To learn more about how to setup slf4j for your server-side code, see
        <ulink url="http://www.slf4j.org/">their website</ulink>
        .
      </para>
   </section>
   <section id="sid-74908675_Logging-ExampleUsage">
      <title>Example Usage</title>
      <para>Here is sample usage of the slf4j code (which with the above setup can be run on the client or server):</para>
      <example>
         <title>LogExample.java</title>
         <programlisting language="java">
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import javax.inject.Inject;

public class LogExample {

  public void logStuff() {
    // Get a logger for this class
    @Inject Logger logger;

    // Logging going from most to least detailed
    logger.trace("this is extremely specific!");
    logger.debug("this is still pretty specific");
    logger.info("this is an average log message");
    logger.warn("there might be something fishy here...");
    logger.error("uh oh... abandon ship!", new Exception("I am a logged exception"));
  }
}
</programlisting>
      </example>
   </section>
   <section id="sid-74908675_Logging-LoggerNames">
      <title>Logger Names</title>
      <para>
        By default, the above example with provide a logger with the fully qualified class name of the enclosing class. To inject a logger with an alternate name, use the
        <code>NamedLogger</code>
        annotation:
      </para>
      <example>
         <title>NamedLogExample.java</title>
         <programlisting language="java">
import org.slf4j.Logger;
import javax.inject.Inject;
import org.jboss.errai.common.client.api.NamedLogger;

public class NamedLogExample {

  // Get a logger with the name "Logger!"
  @Inject @NamedLogger("Logger!") logger;
  
  // Get the root logger
  @Inject @NamedLogger rootLogger;

}
</programlisting>
      </example>
   </section>
</chapter>

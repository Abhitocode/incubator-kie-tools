<?xml version="1.0" encoding="UTF-8"?>
<chapter id="sid-65274252">
   <title>Errai Cordova</title>
   <para>Starting with version 2.4.0, Errai now supports mobile development. One of the modules that makes this feasible is the Cordova module. It offers a way to integrate with native hardware in a Errai way.</para>
   <section id="sid-65274252_ErraiCordova-Getstarted">
      <title>Get started</title>
      <para>The Errai Cordova module is directly integrated with ERRAI:Container and you can use it by adding the following in your App.gwt.xml:</para>
      <section id="sid-65274252_ErraiCordova-App.gwt.xml">
         <title>App.gwt.xml</title>
         <informalexample>
            <programlisting language="xml">
&lt;inherits name="org.jboss.errai.ui.Cordova"/&gt;
</programlisting>
         </informalexample>
         <para>
          You could also start from a forge or
          <ulink url="https://docs.jboss.org/author/pages/viewpage.action?pageId=57049130">maven archetype</ulink>
          .
        </para>
      </section>
   </section>
   <section id="sid-65274252_ErraiCordova-Integratewithnativehardware">
      <title>Integrate with native hardware</title>
      <para>When the Cordova is included you can integrate with native hardware in a very 'Errai' by injecting the native components strait into you code:</para>
      <informalexample>
         <programlisting language="java">
@Templated("#main")
public class KitchenSinkClient extends Composite {
  @Inject
  Camera camera;

  @Inject
  @DataField
  Button takePicture;

  @EventHandler("takePicture")
  public void onTakePicktureClicked(ClickEvent event) {
    PictureOptions options = new PictureOptions(25);
    options.setDestinationType(PictureOptions.DESTINATION_TYPE_DATA_URL);
    options.setSourceType(PictureOptions.PICTURE_SOURCE_TYPE_CAMERA);

    camera.getPicture(options, new PictureCallback() {

      @Override
      public void onSuccess(String data) {
        image.setUrl(UriUtils.fromSafeConstant("data:image/jpeg;base64," + data));
      }

      @Override
      public void onFailure(String error) {
        setGeneralErrorMessage("Could not take picture: " + error);
      }
    });
  }
</programlisting>
      </informalexample>
      <para>The components that are supported come from the https://code.google.com/p/gwt-phonegap/ project have a look there form more documentation.</para>
      <para>The native supported hardere you can inject consists of:</para>
      <itemizedlist>
         <listitem>
            <para>Camera</para>
         </listitem>
         <listitem>
            <para>Accelerometer</para>
         </listitem>
         <listitem>
            <para>Contacts</para>
         </listitem>
         <listitem>
            <para>Capture (Provides access to the audio, image, and video capture capabilities of the device).</para>
         </listitem>
         <listitem>
            <para>Compass</para>
         </listitem>
         <listitem>
            <para>Notification (http://docs.phonegap.com/en/edge/cordova_notification_notification.md.html#Notification</para>
         </listitem>
         <listitem>
            <para>File create a native file</para>
         </listitem>
         <listitem>
            <para>Device Get general information about the device.</para>
         </listitem>
      </itemizedlist>
      <para>So to integrate with these things all we have to do is</para>
      <informalexample>
         <programlisting language="java">@Inject</programlisting>
      </informalexample>
      <para>these classes. There are also a couple of CDI events one can observer to be informed about hardware state:</para>
      <itemizedlist>
         <listitem>
            <para>BackButtonEvent</para>
         </listitem>
         <listitem>
            <para>BatteryCriticalEvent</para>
         </listitem>
         <listitem>
            <para>BatteryEvent</para>
         </listitem>
         <listitem>
            <para>BatteryLowEvent</para>
         </listitem>
         <listitem>
            <para>BatteryStatusEvent</para>
         </listitem>
         <listitem>
            <para>EndCallButtonEvent</para>
         </listitem>
         <listitem>
            <para>MenuButtonEvent</para>
         </listitem>
         <listitem>
            <para>OffLineEvent</para>
         </listitem>
         <listitem>
            <para>OnlineEvent</para>
         </listitem>
         <listitem>
            <para>PauseEvent</para>
         </listitem>
         <listitem>
            <para>ResumeEvent</para>
         </listitem>
         <listitem>
            <para>SearchButtonEvent</para>
         </listitem>
         <listitem>
            <para>StartCallButtonEvent</para>
         </listitem>
         <listitem>
            <para>VolumeDownButtonEvent</para>
         </listitem>
         <listitem>
            <para>VolumeUpButtonEvent</para>
         </listitem>
      </itemizedlist>
      <para>Example of how to use these events:</para>
      <informalexample>
         <programlisting language="java">
  private void batteryIsLow(@Observes BatteryLowEvent event) {
  	//todo add some logic....
  }
</programlisting>
      </informalexample>
   </section>
   <section id="sid-65274252_ErraiCordova-AeroGear">
      <title>AeroGear</title>
      <para>
        AeroGear is a very new and hot new project with jboss these wrappers give you the posibilty to create your server with AeroGear and your client with Errai. Also have a look at the
        <ulink url="http://aerogear.org/docs">documentation</ulink>
        of the AeroGear project. There is some vocabulary to learn.
      </para>
      <section id="sid-65274252_ErraiCordova-Pipes">
         <title>Pipes</title>
         <para>Pipes are for getting data from the server. Right now the only implementation is REST it will use Id to construct urls.</para>
         <informalexample>
            <programlisting language="java">
  Pipe&lt;Task&gt; pipe = new PipeFactory().createPipe(Task.class, "tasks");

  pipe.save(new Task(123, "new", "2012-01-01"), new AsyncCallback&lt;Task&gt;() {
    @Override
    public void onSuccess(Task result) {
      Window.alert("jipee saved a taks");
    }
    @Override
    public void onFailure(Throwable caught) {
    }
  });
</programlisting>
         </informalexample>
         <para>This will preform a PUT /tasks URL</para>
      </section>
      <section id="sid-65274252_ErraiCordova-Stores">
         <title>Stores</title>
         <para>Another concept that comes with AeroGear is Stores. Currently there are 2 Store types supported: Memory and SessionLocal. Memory is just a big javascript array to hold your data. Here is how you create and configure a Store:</para>
         <informalexample>
            <programlisting language="java">
    Store&lt;User&gt; store = new DataManager().store(User.class);

    store.save(new User(2, "test2"));
    Collection&lt;User&gt; collection = store.readAll();

    User user = store.read(2);
</programlisting>
         </informalexample>
      </section>
      <section id="sid-65274252_ErraiCordova-Authentication">
         <title>Authentication</title>
         <para>Pipes can be authenticated with just add the authenticator into the Pipe and you are good to go.</para>
         <informalexample>
            <programlisting language="java">
    Authenticator authenticator = new AuthenticationFactory().createAuthenticator("name");
    Pipe&lt;Task&gt; pipe = new PipeFactory().createPipe(Task.class, "tasks", authenticator);

    authenticator.login(username.getText(), password.getText(), new AsyncCallback&lt;String&gt;() {
      @Override
      public void onSuccess(String result) {
        Window.alert("successful login");
      }

      @Override
      public void onFailure(Throwable caught) {
        message.setText("Login failed, please try again");
      }
    });
</programlisting>
         </informalexample>
         <para>There is also a method enroll to add new users.</para>
      </section>
   </section>
</chapter>

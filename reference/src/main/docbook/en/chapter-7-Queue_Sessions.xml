<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="sid-5833085_ReferenceGuide-QueueSessions">
    
    <title>Queue Sessions</title>
    <para>The ErraiBus maintains it's own seperate session management on-top of the regular HTTP session management. While the queue sessions are tied to, and dependant on HTTP sessions for the most part (meaning they die when HTTP sessions die), they provide extra layers of session tracking to make dealing with complex applications built on Errai easier.</para>
    <section id="sid-5833085_ReferenceGuide-Scopes">
      
      <title>Scopes</title>
      <para>One of the things Errai offers is the concept of session and local scopes.</para>
      <section id="sid-5833085_ReferenceGuide-LocalScope">
        
        <title>Local Scope</title>
        <para>A local scope is scoped to a single browser instance. But not to a single session.</para>
        <para>
          In a browser a local scope would be confined to a tab or a window within a browser. You can store parameters inside a local scope just like with a session by using the
          <code>LocalContext</code>
          helper class.
        </para>
        <informalexample>
          <programlisting>public class TestService implements MessageCallback {
  public void callback(final Message message) {
    // obtain a reference to the local context by referencing the incoming message.
    LocalContext injectionContext = LocalContext.get(message);

   // set an attribute.
    injectionContext.setAttribute("MyAttribute", "Foo");
  }
}</programlisting>
        </informalexample>
      </section>
      <section id="sid-5833085_ReferenceGuide-SessionScopes">
        
        <title>Session Scopes</title>
        <para>A session scope is scoped across all instances of the same session. When a session scope is used, any parameters stored will be accessible and visible by all browser instances and tabs.</para>
        <para>The SessionContext helper class is used for accessing the session scope.</para>
        <informalexample>
          <programlisting>public class TestService implements MessageCallback {
  public void callback(final Message message) {
    // obtain a reference to the session context by referencing the incoming message.
    SessionContext injectionContext = SessionContext.get(message);

    // set an attribute.
    injectionContext.setAttribute("MyAttribute", "Foo");
  }
}</programlisting>
        </informalexample>
      </section>
    </section>
    <section id="sid-5833085_ReferenceGuide-Lifecycle">
      
      <title>Lifecycle</title>
      <para>The lifescyle of a session is bound by the underlying HTTP session. It is also bound by activity thresholds. Clients are required to send heartbeat messages every once in a while to maintain their sessions with the server. If a heartbeat message is not received after a certain period of time, the session is terminated and any resources are deallocated.</para>
    </section>
  </chapter>

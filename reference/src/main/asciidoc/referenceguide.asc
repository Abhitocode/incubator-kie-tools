Errai Framework User Guide
==========================
:author: Mike Brock, Christian Sadilek, Jonathan Fuerth, Lincoln Baxter III
:toc:
:numbered:
:website: http://www.jboss.org
:doctype: book
:source-highlighter: pygments

Errai is a GWT-based framework for building rich web applications using next-generation web technologies. 


Required software
=================

Errai requires a JDK version 6 or higher and depends on Apache Maven to build and run the examples, and for leveraging the quickstart utilities.

* JDK 6.0: http://java.sun.com/javase/downloads/index.jsp
* Apache Maven: http://maven.apache.org/download.html


Overview
========

Errai utilizes the GWT compiler to transpile its framework capabilities to JavaScript to run inside a standard web browser, providing tools to help build rich client applications using Java and familiar APIs. 

Errai provides a strong-emphasis on type safety, maintainability and the use of familiar concepts for web developers. 


Dependency Injection
====================

Dependency injection (DI) allows for cleaner and more modular code, by permitting the implementation of decoupled and type-safe components. By using DI, components do not need to be aware of the implementation of provided services. Instead, they merely declare a contract with the container, which in turn provides instances of the services that component depends on.

NOTE: *Classpath Scanning and ErraiApp.properties* +
Errai only scans the contents of classpath locations (JARs and directories) that have a file called ErraiApp.properties at their root. If dependency injection is not working for you, double-check that you have an ErraiApp.properties in every JAR and directory that contains classes Errai should know about.

A simple example:
[source,java]
---------------------------------------------------------------------
public class MyLittleClass {
  private final TimeService timeService;
 
  @Inject
  public MyLittleClass(TimeService timeService) {
    this.timeService = timeService;
  }
 
  public void printTime() {
    System.out.println(this.timeService.getTime());
  }
}
---------------------------------------------------------------------

/*
 * Copyright (c) 2014,2015,2016 Ahome' Innovation Technologies. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath(group: 'org.ajoberstar', name: 'grgit', version: '1.7.0')
        classpath(group: 'commons-codec', name: 'commons-codec', version: '1.10')
        classpath(group: 'commons-logging', name: 'commons-logging', version: '1.2')
        classpath(group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.2')
        classpath(group: 'org.fusesource.jansi', name: 'jansi', version: '1.11')
        classpath(group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.7', classifier: 'indy')
    }
}

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'eclipse'

compileJava.options.encoding = 'UTF-8'

sourceCompatibility = 1.7

targetCompatibility = 1.7

version = '1.0.0-RC3'

group = 'com.ahome-it'

task doJavaDocs(type: Groovydoc) {
    source = sourceSets.main.allSource
    classpath = sourceSets.main.runtimeClasspath + buildscript.configurations.classpath
    destinationDir = file("${buildDir}/docs/javadoc")
    includes = ['com/ait/lienzo/**']
    docTitle = "Lienzo 2D Structured Graphics Tests"
    footer = "<small><a href=\"https://github.com/ahome-it/lienzo-tests\" target=\"_blank\">Lienzo Tests - ${version} - Author: Roger Martinez</a></small>"
    getGroovydocLinks().each { name, list ->
        link(name, *list)
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: doJavaDocs) {
    classifier = 'javadoc'
    from "${buildDir}/docs/javadoc"
}

compileJava.dependsOn(clean)

jar {
    manifest {
        attributes 'Implementation-Title': 'Lienzo-Tests', 'Implementation-Version': version
    }
    from sourceSets.main.allSource
}

repositories {
    mavenCentral()
    maven {
        url "${sonatype_snapshotURL}"
    }
}

sourceSets {
    main {
        resources {
            srcDir 'src/main/java'
        }
    }
}

dependencies {
    compile(group: 'com.ahome-it', name: 'lienzo-core', version: '2.0.277-RELEASE')
    compile(group: 'com.google.gwt', name: 'gwt-dev', version: '2.7.0')
    compile(group: 'com.google.gwt', name: 'gwt-user', version: '2.7.0')
    compile(group: 'junit', name: 'junit', version: '4.11')
    compile(group: 'org.mockito', name: 'mockito-core', version: '1.9.5')
    compile(group: 'com.google.gwt.gwtmockito', name: 'gwtmockito', version: '1.1.6')
    compile(group: 'org.javassist', name: 'javassist', version: '3.17.1-GA')
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives jar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            //repository(url: "${sonatype_snapshotURL}") {
            repository(url: "${sonatype_stageingURL}") {
                authentication(userName: "${sonatype_user}", password: "${sonatype_password}")
            }
            pom.project {
                name 'Lienzo-Tests'
                packaging 'jar'
                description 'Ahome Lienzo Testing Framework.'
                url 'https://github.com/ahome-it/lienzo-tests'
                scm {
                    url 'scm:git@github.com:ahome-it/lienzo-tests.git'
                    connection 'scm:git@github.com:ahome-it/lienzo-tests.git'
                    developerConnection 'scm:git@github.com:ahome-it/lienzo-tests.git'
                }
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'roger600'
                        name 'Roger Martinez'
                        email 'roger600@gmail.com'
                        url 'https://www.lienzo-core.com'
                    }
                }
            }
        }
    }
}

def Map<String, List<String>> getGroovydocLinks() {
    def lmap = [:]
    File data = file('groovydoc/GROOVYDOC_LINK_LISTS.txt')
    if (data.exists()) {
        data.eachLine { line ->
            def vals = ((CharSequence) line).tokenize(',')
            lmap[vals.head()] = vals.tail()
        }
    }
    lmap
}

task(buildGroovydocLinks) << {
    def site = [:]
    File data = file('groovydoc/GROOVYDOC_LINK_SITES.txt')
    if (data.exists()) {
        data.eachLine { line ->
            site[line] = ((CharSequence) new URL("${line}/package-list").text).tokenize('\n')
        }
    }
    File make = file('groovydoc/GROOVYDOC_LINK_LISTS.txt')
    if(make.exists()) {
        make.delete()
    }
    make.createNewFile()
    def save = make.newPrintWriter()
    site.each { link, list ->
        def show = "${link}"
        list.each { line ->
            show = "${show},${line}"
        }
        save.println("${show}")
    }
    save.flush()
    save.close()
}
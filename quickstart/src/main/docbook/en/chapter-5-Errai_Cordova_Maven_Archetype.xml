<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="sid-57049130">
    
    <title>Errai-Cordova Maven Archetype</title>
    <para>
      This archetype is based on the
      <xref linkend="sid-21627124"/>
      , what has changed is that the front-end is build on
      <ulink url="https://docs.jboss.org/author/pages/viewpage.action?pageId=51806600">Errai UI</ulink>
      and uses twitter bootstrap to make it responsive. It also includes an example of how to use the camera, to see this in action you'll need to deploy the application on an actual device.
    </para>
    <informalexample>
      <programlisting>
mvn archetype:generate \
-DarchetypeGroupId=org.jboss.errai.archetypes \
-DarchetypeArtifactId=cordova-quickstart \
-DarchetypeVersion=2.3.0.CR1 \
-DarchetypeRepository=https://repository.jboss.org/nexus/content/repositories/snapshots/
</programlisting>
    </informalexample>
    <para>Customise the build properties according to your needs.</para>
    <informalexample>
      <programlisting>
Define value for property 'groupId': : foo.bar
Define value for property 'artifactId': : rest-app
Define value for property 'version': 1.0-SNAPSHOT:
Define value for property 'package': foo.bar: com.foo.bar
Confirm properties configuration:
groupId: foo.bar
artifactId: cordova
version: 1.0-SNAPSHOT
package: com.foo.bar
Y:
</programlisting>
    </informalexample>
    <para>The project will be created in a directory that corresponds to the provided artifactId.</para>
    <para>In a few simple steps, you have created a build environment that can build, test, package, and launch a simple application. You can now launch GWT development mode, run integration tests with coverage reporting, and package your web application for deployment.</para>
    <para>To get your app running in JBoss AS 7, ensure there is a local instance of JBoss AS 7.1 or newer running locally, then type:</para>
    <informalexample>
      <programlisting>
mvn package
mvn jboss-as:deploy
</programlisting>
    </informalexample>
    <para>To get this installed on a device you'll need to, change the server address in the javascript by changing the Config.java and download and install apache-cordova.</para>
    <para>Now in order for the device to communicate with the backend server it will need to know it's location so open the Config.java that has been generated by the archtype and change localhost in the ip address. Preform a maven clean build to regenerate the javascript:</para>
    <informalexample>
      <programlisting>
mvn clean package
</programlisting>
    </informalexample>
    <para>
      Get the latest build from
      <ulink url="http://phonegap.com/download">phonegap</ulink>
      extract the phonegap zip and open a terminal on that location. Find the type of device you want to create a project for and execute the create script. This script takes the following parameters: &lt;path_to_new_project&gt; &lt;package_name&gt; &lt;project_name&gt;. Example doing this for a iOS project:
    </para>
    <informalexample>
      <programlisting>
cd /Applications/apps/phonegap/lib/
./ios/bin/create ~/project org.jboss.example kitchensink
</programlisting>
    </informalexample>
    <para>Now you have a project that contains a www directory copy the generated html and javascript from the target/&lt;project_name&gt;-1.0-SNAPSHOT/. Open the project with xcode add the following to the Cordova.plist and run the application.</para>
    <informalexample>
      <programlisting>
&lt;key&gt;ExternalHosts&lt;/key&gt;
&lt;array&gt;
	&lt;string&gt;*&lt;/string&gt;
&lt;/array&gt;
</programlisting>
    </informalexample>
    <note>
      <title>Create a link</title>
      <para>You could also create a symbolic link called www and let that point to &lt;project&gt;/target/&lt;project_name&gt;-&lt;version&gt; that way you save time as you know longer have an extra copy step to deploy you code to the device.</para>
    </note>
  </chapter>

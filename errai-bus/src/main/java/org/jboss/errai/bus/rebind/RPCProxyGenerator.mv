@code{ def box(cls) { org.mvel2.util.ParseTools.boxPrimitive(cls); } }
class @{implementationClassName} implements @{interfaceClass.getName()}, org.jboss.errai.bus.client.framework.RPCStub {

    private org.jboss.errai.bus.client.api.RemoteCallback callback;

    public void setRemoteCallback(org.jboss.errai.bus.client.api.RemoteCallback callback) {
        this.callback = callback;
    }

    @code{count = 0;}
    @foreach{method : interfaceClass.getMethods()}
        public @{method.getReturnType() == Void.class ? "void" : method.getReturnType().getName()}
               @{method.getName()}(@foreach{type : method.getParameterTypes()}@{type.getName()} _@{count++}@end{", "}) {

               org.jboss.errai.bus.client.api.base.MessageBuilder.createCall()
                    .call("@{interfaceClass.getName()}")
                    .endpoint("@{org.jboss.errai.bus.rebind.RebindUtils.createCallSignature(method)}", new Object[] {@code{count = 0;}@foreach{type : method.getParameterTypes()}_@{count++}@end{","}})
                    .respondTo(@{box(method.getReturnType()).getName()}.class, callback)
                    .noErrorHandling()
                    .sendNowWith(bus);

                @if{java.lang.Number.isAssignableFrom(box(method.getReturnType()))}
                return 0;
                @elseif{Boolean.isAssignableFrom(box(method.getReturnType()))}
                return false;
                @else{}
                return null;
                @end{}
        }
    @end{}
}

org.jboss.errai.bus.client.framework.RemoteProxyFactory.addRemoteProxy(
                          @{interfaceClass.getName()}.class, new @{implementationClassName}()
                 );